/*
NARPassword for Java - Application to generate a non-random password
Copyright (C) 2011-2020 Hugues Johnson

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

package com.huguesjohnson.narpas;

import java.io.Serializable;

public class PasswordSetting implements Serializable{
	private static final long serialVersionUID=6400601051372385039L;
	private String passwordName;
	private boolean optionUseLCase;
	private boolean optionUseUCase;
	private boolean optionUseNumbers;
	private boolean optionUseSChars;
	private int	passwordLength;
	private String passwordNotes;
	
	/* autogenerated code below */
	
	@Override
	public String toString() {
		return passwordName;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + (optionUseLCase ? 1231 : 1237);
		result = prime * result + (optionUseNumbers ? 1231 : 1237);
		result = prime * result + (optionUseSChars ? 1231 : 1237);
		result = prime * result + (optionUseUCase ? 1231 : 1237);
		result = prime * result + passwordLength;
		result = prime * result + ((passwordName == null) ? 0 : passwordName.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		PasswordSetting other = (PasswordSetting) obj;
		if (optionUseLCase != other.optionUseLCase)
			return false;
		if (optionUseNumbers != other.optionUseNumbers)
			return false;
		if (optionUseSChars != other.optionUseSChars)
			return false;
		if (optionUseUCase != other.optionUseUCase)
			return false;
		if (passwordLength != other.passwordLength)
			return false;
		if (passwordName == null) {
			if (other.passwordName != null)
				return false;
		} else if (!passwordName.equals(other.passwordName))
			return false;
		return true;
	}

	public String getPasswordName() {
		return passwordName;
	}

	public void setPasswordName(String passwordName) {
		this.passwordName = passwordName;
	}
	public boolean isOptionUseLCase() {
		return optionUseLCase;
	}
	public void setOptionUseLCase(boolean optionUseLCase) {
		this.optionUseLCase = optionUseLCase;
	}
	public boolean isOptionUseUCase() {
		return optionUseUCase;
	}
	public void setOptionUseUCase(boolean optionUseUCase) {
		this.optionUseUCase = optionUseUCase;
	}
	public boolean isOptionUseNumbers() {
		return optionUseNumbers;
	}
	public void setOptionUseNumbers(boolean optionUseNumbers) {
		this.optionUseNumbers = optionUseNumbers;
	}
	public boolean isOptionUseSChars() {
		return optionUseSChars;
	}
	public void setOptionUseSChars(boolean optionUseSChars) {
		this.optionUseSChars = optionUseSChars;
	}
	public int getPasswordLength() {
		return passwordLength;
	}
	public void setPasswordLength(int passwordLength) {
		this.passwordLength = passwordLength;
	}
	public String getPasswordNotes() {
		return passwordNotes;
	}
	public void setPasswordNotes(String passwordNotes) {
		this.passwordNotes = passwordNotes;
	}
	public static long getSerialversionuid() {
		return serialVersionUID;
	}

	public PasswordSetting(String passwordName, boolean optionUseLCase, boolean optionUseUCase,
			boolean optionUseNumbers, boolean optionUseSChars, int passwordLength, String passwordNotes) {
		super();
		this.passwordName = passwordName;
		this.optionUseLCase = optionUseLCase;
		this.optionUseUCase = optionUseUCase;
		this.optionUseNumbers = optionUseNumbers;
		this.optionUseSChars = optionUseSChars;
		this.passwordLength = passwordLength;
		this.passwordNotes = passwordNotes;
	}

	public PasswordSetting(String passwordName, boolean optionUseLCase, boolean optionUseUCase,
			boolean optionUseNumbers, boolean optionUseSChars, int passwordLength) {
		super();
		this.passwordName = passwordName;
		this.optionUseLCase = optionUseLCase;
		this.optionUseUCase = optionUseUCase;
		this.optionUseNumbers = optionUseNumbers;
		this.optionUseSChars = optionUseSChars;
		this.passwordLength = passwordLength;
	}
}
